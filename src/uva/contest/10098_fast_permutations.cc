#include <iostream>

#include <cstdlib>
#include <cstring>
#include <functional>

using StrConsumer = std::function<void(char*)>;

/**
 * Generates all the permutations from the given string, sending them all to the
 * provided consumer function. If the string is initially sorted, the
 * permutations will be provided in the lexicographical order. The last argument
 * is supposed to be left blank, and will be used for the impl. recursion.
 */
void gen_permut(char* str, int size,
                const StrConsumer& consumer,
                char* full_str = nullptr) {
  if (full_str == nullptr) full_str = str;
  consumer(full_str);
  
  if (size == 1) return;

  // In order to generate the permutations in the lexicographical order, we
  // start by doing permutations in the back side of the string in increasing
  // sizes as we generate all the permutations of the smaller sizes.
  for (int pSize = 2; pSize <= size; pSize++) {
    char* permut = str + (size - pSize);
    // The permutations of a specific size are generated by moving one of the
    // characters from the middle of the string to the start of it and recursing
    // on the resulting substring to the right of the moved character. The char
    // to go first is picked in the order they appear on the string so that the
    // generated permutations are in lexicographical order. They are also moved
    // around in such way that the resulting substring to the right of the char
    // that's been moved is always kept sorted, so that recursing the algorithm
    // works for generating the permutations in order for that substring.
    for (int pIdx = 1; pIdx < pSize; pIdx++) {
      if (permut[0] == permut[pIdx]) continue;
      std::swap(permut[0], permut[pIdx]);
      gen_permut(permut + 1, pSize - 1, consumer, full_str);
    }
    // undo the permutations
    char last = permut[0];
    for (int i = 1; i < pSize; i++) {
      permut[i - 1] = permut[i];
    }
    permut[pSize - 1] = last;
  }
}

int char_cmp(const void* a, const void* b) {
  return *((const char*)a) - *((const char*)b);
}

int main() {
  using namespace std;
  int N;
  char word[20];

  cin >> N;
  while (N --> 0) {
    cin >> word;
    
    int size = strlen(word);
    qsort(word, size, sizeof(char), &char_cmp);

    gen_permut(word, size, [](char* w) {cout << w << endl;});
    cout << endl;
  }
  return 0;
}
